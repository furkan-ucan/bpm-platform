name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  validate:
    name: Validate
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Install Dependencies
        run: |
          cd backend
          npm ci

      - name: Lint
        run: |
          cd backend
          npm run lint

      - name: Type Check
        run: |
          cd backend
          npm run type-check

  test:
    name: Test
    needs: validate
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:5.0
        ports:
          - 27017:27017

    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Install Dependencies
        run: |
          cd backend
          npm ci

      - name: Run Unit Tests
        run: |
          cd backend
          npm run test:unit
        env:
          NODE_ENV: test
          MONGODB_URI: mongodb://localhost:27017/bpm_test

      - name: Run Integration Tests
        run: |
          cd backend
          npm run test:integration
        env:
          NODE_ENV: test
          MONGODB_URI: mongodb://localhost:27017/bpm_test

      - name: Upload Coverage
        uses: actions/upload-artifact@v3
        with:
          name: coverage
          path: backend/coverage

  build:
    name: Build
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Install Dependencies
        run: |
          cd backend
          npm ci

      - name: Build
        run: |
          cd backend
          npm run build

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: backend/dist

  deploy-staging:
    name: Deploy to Staging
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment:
      name: staging
      url: https://staging.bpm-platform.com
    
    steps:
      - uses: actions/checkout@v3

      - name: Download Build Artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: backend/dist

      - name: Deploy to Heroku
        uses: akhileshns/heroku-deploy@v3.12.14
        with:
          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
          heroku_app_name: bpm-platform-staging
          heroku_email: ${{ secrets.HEROKU_EMAIL }}
          branch: main

  deploy-production:
    name: Deploy to Production
    needs: deploy-staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment:
      name: production
      url: https://bpm-platform.com
    
    steps:
      - uses: actions/checkout@v3

      - name: Download Build Artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: backend/dist

      - name: Deploy to Heroku
        uses: akhileshns/heroku-deploy@v3.12.14
        with:
          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
          heroku_app_name: bpm-platform
          heroku_email: ${{ secrets.HEROKU_EMAIL }}
          branch: main

  notify:
    name: Notify
    needs: [validate, test, build]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify on Success
        if: ${{ success() }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: ci-cd
          SLACK_COLOR: good
          SLACK_TITLE: Build Success
          SLACK_MESSAGE: 'Pipeline completed successfully! ðŸŽ‰'

      - name: Notify on Failure
        if: ${{ failure() }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: ci-cd
          SLACK_COLOR: danger
          SLACK_TITLE: Build Failed
          SLACK_MESSAGE: 'Pipeline failed! Please check the logs ðŸš¨'
