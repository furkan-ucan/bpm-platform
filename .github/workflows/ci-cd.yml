name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  HEROKU_STAGING_APP: "bpm-platform-staging"
  HEROKU_PROD_APP: "bpm-platform"

jobs:
  test:
    name: üß™ Test
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [20.x]

    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: './backend/package-lock.json'
    
    - name: Install Dependencies
      working-directory: ./backend
      run: npm ci
    
    - name: Lint Check
      working-directory: ./backend
      run: npm run lint
    
    - name: Run Tests
      working-directory: ./backend
      run: npm test
    
    - name: Upload Coverage
      uses: codecov/codecov-action@v3
      with:
        directory: ./backend/coverage
        flags: unittests

  security:
    name: üõ°Ô∏è Security Check
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/node@master
      if: success()
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

  build:
    name: üèóÔ∏è Build
    needs: [test, security]
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: './backend/package-lock.json'
    
    - name: Install Dependencies
      working-directory: ./backend
      run: npm ci
    
    - name: Build
      working-directory: ./backend
      run: npm run build

    - name: Upload Build Artifact
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: backend/dist

  deploy-staging:
    name: üöÄ Deploy to Staging
    needs: build
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    runs-on: ubuntu-latest
    environment:
      name: staging
      url: https://bpm-platform-staging.herokuapp.com
    
    steps:
    - uses: actions/checkout@v3
    - uses: actions/download-artifact@v3
      with:
        name: dist
        path: backend/dist
    
    - name: Deploy to Heroku Staging
      uses: akhileshns/heroku-deploy@v3.12.14
      with:
        heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
        heroku_app_name: ${{ env.HEROKU_STAGING_APP }}
        heroku_email: ${{ secrets.HEROKU_EMAIL }}
        branch: develop

  deploy-production:
    name: üöÄ Deploy to Production
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://bpm-platform.herokuapp.com
    
    steps:
    - uses: actions/checkout@v3
    - uses: actions/download-artifact@v3
      with:
        name: dist
        path: backend/dist
    
    - name: Deploy to Heroku Production
      uses: akhileshns/heroku-deploy@v3.12.14
      with:
        heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
        heroku_app_name: ${{ env.HEROKU_PROD_APP }}
        heroku_email: ${{ secrets.HEROKU_EMAIL }}
        branch: main

  notify:
    name: üì¢ Notify
    needs: [build, deploy-staging, deploy-production]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify Success
      if: success()
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        SLACK_CHANNEL: deployments
        SLACK_TITLE: "Deployment Status"
        SLACK_COLOR: good
        SLACK_MESSAGE: "üéâ Pipeline completed successfully!"
    
    - name: Notify Failure
      if: failure()
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        SLACK_CHANNEL: deployments
        SLACK_TITLE: "Deployment Status"
        SLACK_COLOR: danger
        SLACK_MESSAGE: "‚ùå Pipeline failed!"